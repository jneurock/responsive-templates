{{partial "header"}}

<main class="row">
  <div class="column">
    <h1 class="h3">Welcome</h1>

    <p>
      This demo is meant to show how easily you can setup responsive templates with
      <a href="http://emberjs.com/">Ember.js</a>. This is <em>not</em> intended to advocate for a
      JavaScript-based approach over tried and true Responsive Web Design (RWD) techniques. The goal
      of this demo is to give you another tool to put in your RWD belt.
    </p>

    <ul class="small-block-grid-1 medium-block-grid-3 text-center">
      <li>
        {{#link-to "statuses" class="block panel"}}
          <span class="icon statuses h2"></span>
          <br>
          Media Statuses
        {{/link-to}}
      </li>

      <li>
        {{#link-to "tricky-layout" class="block panel"}}
          <span class="icon layouts h2"></span>
          <br>
          Tricky Layout
        {{/link-to}}
      </li>

      <li>
        {{#link-to "responsive-images" class="block panel"}}
          <span class="icon content h2"></span>
          <br>
          Responsive Images
        {{/link-to}}
      </li>
    </ul>

    <h4>How to Use This Demo</h4>

    <p>
      This demo is fully responsive, i.e., you can simply change the size of your browser window to
      see how it reacts. There are nice tools built-in to Firefox and Chrome. In Firefox press
      <kbd>Cmd</kbd> + <kbd>Opt</kbd> + <kbd>m</kbd> (Mac) or
      <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>M</kbd> (Windows). In Chrome, first press
      <kbd>Cmd</kbd> + <kbd>Opt</kbd> + <kbd>i</kbd> (Mac) or <kbd>F12</kbd> (Windows/Linux) and then
      press <kbd>Cmd/Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>M</kbd>.
    </p>

    <p>
      The code for this demo is available here:
      <a href="https://github.com/jneurock/responsive-templates">https://github.com/jneurock/responsive-templates</a>.
      The demo code is meant to be concise and is <em>not</em> how anyone would ideally code
      a project. Feel free to copy and paste from the demo code but keep in mind that most if it is
      not very testable and is quite fragile.
    </p>

    <hr>

    <h4>About This Demo</h4>

    <p>
      The concept here is simple: Ember makes it easy to inject an object into controllers
      (exposing it to the view layer) that keeps track of media queries. Since properties of this
      object can be accessed in the templates, conditional logic can be added very easily.
    </p>

    <h5>For example:</h5>
    <p>
      You are viewing this site on a
      {{#if media.small}}
        small screen (640px wide or less).
      {{else if media.medium}}
        medium screen (more than 640px wide but no more than 1024px wide).
      {{else}}
        large screen or up (more than 1024px wide).
      {{/if}}
    </p>

    <span class="label secondary">Handlebars</span>
<code class="code-block"><pre>
&lt;p&gt;
  You are viewing this site on a
  &#123;&#123;#if media.small&#125;&#125;
    small screen (640px wide or less).
  &#123;&#123;else if media.medium&#125;&#125;
    medium screen (more than 640px wide but no more than 1024px).
  &#123;&#123;else&#125;&#125;
    large screen or up (more than 1024px wide).
  &#123;&#123;/if&#125;&#125;
&lt;/p&gt;

</pre></code>

    <span class="label secondary">Rendered HTML</span>
    <code class="code-block">
      &lt;p&gt;
        <br>
        &nbsp;
        You are viewing this site on a
        <br>
        {{#if media.small}}
          &nbsp; small screen (640px wide or less).
        {{else if media.medium}}
          &nbsp; medium screen (more than 640px wide but no more than 1024px).
        {{else}}
          &nbsp; large screen or up (more than 1024px wide).
        {{/if}}
        <br>
      &lt;/p&gt;
    </code>

    <p>
      This isn't a very good example but it has large implications. For one, instead of rendering three
      different paragraphs, and showing/hiding them with CSS, only one paragraph is actually rendered.
      Another advantage (not shown above) is the ability to use conditional logic inline, i.e., at a
      more granular level than can be acheived with CSS media queries.
    </p>
  </div>
</main>

{{partial "footer"}}